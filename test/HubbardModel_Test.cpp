//
// Created by iskakoff on 22/08/16.
//

#include <gtest/gtest.h>
#include "edlib/Hamiltonian.h"
#include "edlib/HubbardModel.h"
#include "edlib/Storage.h"


#ifdef USE_MPI

class HubbardModelTestEnv : public ::testing::Environment {
  protected:
  virtual void SetUp() {
    char** argv;
    int argc = 0;
    int mpiError = MPI_Init(&argc, &argv);
  }

  virtual void TearDown() {
    MPI_Finalize();
  }

  ~HubbardModelTestEnv(){};

};

::testing::Environment* const foo_env = AddGlobalTestEnvironment(new HubbardModelTestEnv);

#endif


TEST(HubbardModelTest, Filling) {
  alps::params p;
  p["NSITES"]=4;
  p["NSPINS"]=2;
  p["INPUT_FILE"]="test/input/4ring/input.h5";
  p["arpack.SECTOR"]=false;
  p["storage.MAX_SIZE"]=576;
  p["storage.MAX_DIM"]=36;
  //p["storage.EIGENVALUES_ONLY"]=false;
  p["storage.EIGENVALUES_ONLY"]=true;
  p["storage.ORBITAL_NUMBER"]=1;
  p["arpack.NEV"]=256;

#ifdef USE_MPI
  typedef EDLib::SRSHubbardHamiltonian HamType;
#else
  typedef EDLib::SOCSRHubbardHamiltonian HamType;
#endif
  HamType ham(p
#ifdef USE_MPI
  , MPI_COMM_WORLD
#endif
  );

  ham.diag();

  // [arXiv:cond-mat/0101476 [cond-mat.str-el]]
  double ref[]={
    -11.8443,
    -11.5336,
    -11.5136,
    -11.4936,
    -10.8443,
    -10.7216,
    -10.7216,
    -10.7016,
    -10.7016,
    -10.6816,
    -10.6816,
    -10.1129,
    -10.1129,
    -10.1129,
    -10.1129,
    -10.0929,
    -10.0929,
    -10.0929,
    -10.0929,
    -10.04,
    -10.02,
    -10.0,
    -9.98,
    -9.96,
    -9.53,
    -9.53,
    -9.51,
    -9.51,
    -9.49,
    -9.49,
    -9.47,
    -9.47,
    -8.91512,
    -8.91512,
    -8.91512,
    -8.91512,
    -8.89512,
    -8.89512,
    -8.89512,
    -8.89512,
    -8.34789,
    -8.34789,
    -8.34789,
    -7.53,
    -7.53,
    -7.53,
    -7.53,
    -7.51,
    -7.51,
    -7.51,
    -7.51,
    -7.49,
    -7.49,
    -7.49,
    -7.49,
    -7.47,
    -7.47,
    -7.47,
    -7.47,
    -7.30129,
    -7.30129,
    -7.30129,
    -7.30129,
    -7.28129,
    -7.28129,
    -7.28129,
    -7.28129,
    -7.02,
    -7.02,
    -7.02,
    -7.02,
    -7.02,
    -7.02,
    -7.0,
    -7.0,
    -7.0,
    -7.0,
    -7.0,
    -7.0,
    -7.0,
    -7.0,
    -6.98,
    -6.98,
    -6.98,
    -6.98,
    -6.98,
    -6.98,
    -6.85429,
    -6.83429,
    -6.81429,
    -6.57849,
    -6.57849,
    -6.57849,
    -6.57849,
    -6.55849,
    -6.55849,
    -6.55849,
    -6.55849,
    -6.0,
    -5.70156,
    -5.70156,
    -5.70156,
    -5.70156,
    -5.70156,
    -5.70156,
//    -5.53,
//    -5.53,
    -5.51,
    -5.51,
    -5.49,
    -5.49,
//    -5.47,
//    -5.47,
    -5.02,
    -5.02,
    -5.02,
    -5.02,
    -5.02,
    -5.02,
    -5.02,
    -5.02,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -5.0,
    -4.98,
    -4.98,
    -4.98,
    -4.98,
    -4.98,
    -4.98,
    -4.98,
    -4.98,
    -4.51,
    -4.51,
    -4.51,
    -4.51,
    -4.49,
    -4.49,
    -4.49,
    -4.49,
    -4.31844,
    -4.31844,
    -4.29844,
    -4.29844,
    -4.27844,
    -4.27844,
    -4.0,
    -3.44151,
    -3.44151,
    -3.44151,
    -3.44151,
    -3.42151,
    -3.42151,
    -3.42151,
    -3.42151,
    -3.16571,
    -3.16571,
    -3.16571,
    -3.02,
    -3.02,
    -3.02,
    -3.02,
//    -3.02,
//    -3.02,
    -3.0,
    -3.0,
    -3.0,
    -3.0,
    -3.0,
    -3.0,
    -3.0,
    -3.0,
    -2.98,
    -2.98,
    -2.98,
    -2.98,
//    -2.98,
//    -2.98,
    -2.71871,
    -2.71871,
    -2.71871,
    -2.71871,
    -2.69871,
    -2.69871,
    -2.69871,
    -2.69871,
    -2.51,
    -2.51,
    -2.51,
    -2.51,
    -2.51,
    -2.51,
    -2.51,
    -2.51,
    -2.49,
    -2.49,
    -2.49,
    -2.49,
    -2.49,
    -2.49,
    -2.49,
    -2.49,
//    -1.67211,
    -1.65211,
//    -1.63211,
    -1.10488,
    -1.10488,
    -1.10488,
    -1.10488,
    -1.08488,
    -1.08488,
    -1.08488,
    -1.08488,
    -0.51,
    -0.51,
//    -0.51,
//    -0.51,
    -0.49,
    -0.49,
//    -0.49,
//    -0.49,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0929233,
    0.0929233,
//    0.0929233,
//    0.0929233,
    0.112923,
    0.112923,
//    0.112923,
//    0.112923,
    0.701562,
    0.701562,
    0.701562,
    0.701562,
    0.701562,
    0.701562,
    0.844289,
    1.5136,
//    1.5136,
//    1.5136,
//    1.84429
  };

  size_t i = 0;
  for(auto pair = ham.eigenpairs().begin(); pair != ham.eigenpairs().end(); ++pair){
    ASSERT_NEAR(pair->eigenvalue(), ref[i], 1e-3);
    i++;
  }

  while(ham.model().symmetry().next_sector()) {
    std::cout<<ham.model().symmetry().sector().size()<<std::endl;
  }
}
